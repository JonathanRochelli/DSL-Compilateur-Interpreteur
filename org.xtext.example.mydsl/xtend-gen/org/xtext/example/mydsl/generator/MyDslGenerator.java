/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator;

import fr.ut2j.m1ice.fsm.FSM;
import fr.ut2j.m1ice.fsm.Final;
import fr.ut2j.m1ice.fsm.Initial;
import fr.ut2j.m1ice.fsm.State;
import fr.ut2j.m1ice.fsm.Transition;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final FSM myfsm = ((FSM) _get);
    String _name = myfsm.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.publicClass(myfsm.getName()));
    fsa.generateFile("main.java", this.createMain(myfsm));
    fsa.generateFile("State.java", this.createAbstractClass("State"));
    fsa.generateFile("Final.java", this.instantiateState("Final"));
    fsa.generateFile("Initial.java", this.instantiateState("Initial"));
    final Consumer<State> _function = (State s) -> {
      if (((!(s instanceof Final)) && (!(s instanceof Initial)))) {
        String _name_1 = s.getName();
        String _plus_1 = (_name_1 + ".java");
        fsa.generateFile(_plus_1, this.instantiateState(s.getName()));
      }
    };
    myfsm.getState().forEach(_function);
  }
  
  public CharSequence createMain(final FSM myfsm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test;");
    _builder.newLine();
    _builder.append("import java.util.Scanner; ");
    _builder.newLine();
    _builder.append("import java.util.*;");
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("* Classe main permettant d\'éxecuter le code");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class main {");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Le contenu de cette fonction dépend des informations écritent dans ls DSL");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main (String[] args){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<State> _state = myfsm.getState();
      for(final State s : _state) {
        {
          if ((s instanceof Final)) {
            _builder.append("\t\t");
            _builder.append("Final finale = new Final(\"");
            String _name = ((Final)s).getName();
            _builder.append(_name, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          } else {
            if ((s instanceof Initial)) {
              _builder.append("\t\t");
              _builder.append("Initial initial = new Initial(\"");
              String _name_1 = ((Initial)s).getName();
              _builder.append(_name_1, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t\t");
              _builder.append("State ");
              String _name_2 = s.getName();
              _builder.append(_name_2, "\t\t");
              _builder.append(" = new ");
              String _name_3 = s.getName();
              _builder.append(_name_3, "\t\t");
              _builder.append("(\"");
              String _name_4 = s.getName();
              _builder.append(_name_4, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("\t\t");
    String _name_5 = myfsm.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" dsl = new ");
    String _name_6 = myfsm.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append("(\"");
    String _name_7 = myfsm.getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("\", initial, finale);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("while (!(dsl.getCurrent() instanceof Final)){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Scanner sc = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Veuillez saisir un trigger :\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String saisie = sc.nextLine();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Vous avez saisi : \" + saisie);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Etat précédent \"+dsl.getCurrent().getName());");
    _builder.newLine();
    {
      EList<Transition> _transition = myfsm.getTransition();
      for(final Transition t : _transition) {
        _builder.append("\t\t\t");
        _builder.append("if (dsl.getCurrent().getName() == \"");
        String _name_8 = t.getState().get(0).getName();
        _builder.append(_name_8, "\t\t\t");
        _builder.append("\" && saisie.equals(\"");
        String _trigger = t.getTrigger();
        _builder.append(_trigger, "\t\t\t");
        _builder.append("\")) ");
        _builder.newLineIfNotEmpty();
        {
          State _get = t.getState().get(1);
          if ((_get instanceof Final)) {
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("dsl.setState(finale);");
            _builder.newLine();
          } else {
            _builder.append("\t\t\t");
            _builder.append("\t");
            _builder.append("dsl.setState(");
            String _name_9 = t.getState().get(1).getName();
            _builder.append(_name_9, "\t\t\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Etat actuel \"+dsl.getCurrent().getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"La machine est dans son état final\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence instantiateState(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test;");
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("* Classe état permettant de définir les états de la machine");
    _builder.newLine();
    _builder.append("* @extends State");
    _builder.newLine();
    _builder.append("* @attributs");
    _builder.newLine();
    _builder.append("* name : nom de l\'état");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(name);
    _builder.append(" extends State{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(name, "\t");
    _builder.append(" (String name){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName (){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createAbstractClass(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test;");
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("* Classe abstraite permettant de factoriser les différents états");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public abstract class ");
    _builder.append(name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract String getName ();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence publicClass(final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test;");
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("* Classe permettant de créer la machine à état");
    _builder.newLine();
    _builder.append("* @attibuts");
    _builder.newLine();
    _builder.append("* name : Nom de la machine");
    _builder.newLine();
    _builder.append("* current : Etat courant");
    _builder.newLine();
    _builder.append("* initial : Etat initial de la machine");
    _builder.newLine();
    _builder.append("* finale : Etat final de la machine");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(name);
    _builder.append(" { ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private State current;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Initial initial;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Final finale;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Constructeur");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(name, "\t");
    _builder.append(" (String name, Initial initialState, Final finalState){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.initial = initialState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.finale = finalState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.current = this.initial;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setState(State state){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.current = state;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Initial getInitial(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.initial;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Final getFinal(){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.finale;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State getCurrent(){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.current;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
